#include <iostream>
#include <vector>
#include <limits>
#include <omp.h>

int main() {
    int n;
    std::cout << "Enter the number of elements: ";
    std::cin >> n;

    if (n <= 0) {
        std::cerr << "Error: Number of elements must be greater than 0." << std::endl;
        return 1;
    }

    std::vector<int> data(n);
    std::cout << "Enter " << n << " integer values:" << std::endl;
    for (int i = 0; i < n; ++i) {
        std::cin >> data[i];
    }

    int min_val = std::numeric_limits<int>::max();
    int max_val = std::numeric_limits<int>::min();
    long long sum_val = 0;

    // Perform parallel reduction
    #pragma omp parallel for reduction(min:min_val) reduction(max:max_val) reduction(+:sum_val)
    for (int i = 0; i < n; ++i) {
        min_val = std::min(min_val, data[i]);
        max_val = std::max(max_val, data[i]);
        sum_val += data[i];
    }

    double average = static_cast<double>(sum_val) / n;

    // Output the results
    std::cout << "\nResults :" << std::endl;
    std::cout << "Minimum: " << min_val << std::endl;
    std::cout << "Maximum: " << max_val << std::endl;
    std::cout << "Sum: " << sum_val << std::endl;
    std::cout << "Average: " << average << std::endl;

    return 0;
}
